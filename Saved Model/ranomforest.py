# -*- coding: utf-8 -*-
"""ranomforest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PXV7OUI9vWv_OVN5IVdwz0F2AUfdwONv
"""

from google.colab import drive
drive.mount('drive')



!pip install h2o4gpu

import h2o4gpu as sklearn

import pandas as pd
import numpy as np

from sklearn import preprocessing
from sklearn.model_selection import train_test_split

# from sklearn.preprocessing import RobustScaler
# scaler = RobustScaler()
from sklearn.ensemble import RandomForestClassifier

dfData = pd.read_csv('drive/My Drive/VoiceData/all_Data.csv')

X = dfData.loc[:, dfData.columns != 'label']
y = dfData['label']

lb = preprocessing.LabelEncoder()
y = lb.fit_transform(y)

# scaler.fit(X)

# x = scaler.transform(X)

X_trainn, X_test, y_trainn, y_test = train_test_split(X, y, test_size=0.30, random_state=5)
X_train, X_val, y_train, y_val = train_test_split(X_trainn, y_trainn, test_size=0.30, random_state=5)

rf_classifier = RandomForestClassifier(n_estimators=40)
rf_classifier.fit(X_train, y_train)

rf_predictions = rf_classifier.predict(X_test)

rf_classifier.score(X_test,y_test)

rf_predictions = lb.inverse_transform(rf_predictions)
y_test = lb.inverse_transform(y_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print(confusion_matrix(y_test,rf_predictions))
print(classification_report(y_test,rf_predictions))
print(accuracy_score(y_test, rf_predictions))

pip install classification-confidence-intervals

import joblib

joblib.dump(rf_classifier, "drive/My Drive/VoiceData/random_forest.joblib")



